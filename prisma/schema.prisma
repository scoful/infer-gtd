// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}



// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    // NextAuth relations
    accounts      Account[]
    sessions      Session[]

    // Business relations
    projects      Project[]
    tasks         Task[]
    notes         Note[]
    journals      Journal[]
    tags          Tag[]
    timeEntries   TimeEntry[]
    taskStatusHistory TaskStatusHistory[]
    savedSearches SavedSearch[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Enums for business logic
enum TaskStatus {
    IDEA
    TODO
    IN_PROGRESS
    WAITING
    DONE
    ARCHIVED
}

enum TaskType {
    IDEA
    ACTION
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum TagType {
    CONTEXT    // @电脑、@电话等上下文
    PROJECT    // 项目标签
    CUSTOM     // 自定义标签
    PRIORITY   // 优先级标签
}

// Core business models
model Project {
    id          String   @id @default(cuid())
    name        String
    description String?
    color       String?  // Hex color for UI display
    isArchived  Boolean  @default(false)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    // Relations
    tasks       Task[]
    notes       Note[]

    @@index([createdById])
    @@index([name])
}

model Task {
    id              String     @id @default(cuid())
    title           String
    description     String?
    status          TaskStatus @default(IDEA)
    type            TaskType   @default(IDEA)
    priority        Priority?

    // Date and time management
    dueDate         DateTime?
    dueTime         String?    // Time in HH:MM format
    completedAt     DateTime?
    completedCount  Int        @default(0)

    // Time tracking
    totalTimeSpent  Int        @default(0) // Total seconds spent
    isTimerActive   Boolean    @default(false)
    timerStartedAt  DateTime?

    // Recurring tasks
    isRecurring     Boolean    @default(false)
    recurringPattern String?   // JSON string for recurring rules
    parentTaskId    String?    // Reference to original recurring task

    // Sorting and ordering
    sortOrder       Int        @default(0) // For custom ordering within same status

    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt

    // Relations
    createdBy       User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById     String

    project         Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
    projectId       String?

    // Self-reference for recurring tasks
    parentTask      Task?      @relation("TaskRecurrence", fields: [parentTaskId], references: [id], onDelete: SetNull)
    childTasks      Task[]     @relation("TaskRecurrence")

    // Additional relations
    tags            TaskTag[]
    timeEntries     TimeEntry[]
    statusHistory   TaskStatusHistory[]
    linkedNotes     Note[]     @relation("TaskNoteLinks")

    @@index([createdById])
    @@index([status])
    @@index([dueDate])
    @@index([projectId])
    @@index([type])
    @@index([priority])
    @@index([status, sortOrder])
    @@index([sortOrder])
}

model Note {
    id          String   @id @default(cuid())
    title       String
    content     String   // Markdown content
    isArchived  Boolean  @default(false)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
    projectId   String?

    // Additional relations
    tags        NoteTag[]
    linkedTasks Task[]   @relation("TaskNoteLinks")

    @@index([createdById])
    @@index([title])
    @@index([projectId])
    @@index([updatedAt])
}

model Journal {
    id          String   @id @default(cuid())
    date        DateTime @unique // Each user can have only one journal per date
    content     String   // Markdown content
    template    String?  // Template used for this journal

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    @@unique([date, createdById]) // Ensure one journal per user per date
    @@index([createdById])
    @@index([date])
}

// Tag system
model Tag {
    id          String   @id @default(cuid())
    name        String
    color       String?  // Hex color for UI display
    type        TagType  @default(CUSTOM) // 新增字段
    category    String?  // 新增字段，如 "context", "project", "custom"
    isSystem    Boolean  @default(false) // 新增字段，系统预定义标签
    description String?  // 标签描述
    icon        String?  // 图标名称或emoji

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    // Relations
    taskTags    TaskTag[]
    noteTags    NoteTag[]

    @@unique([name, createdById]) // Unique tag name per user
    @@index([createdById])
    @@index([name])
    @@index([type])
    @@index([category])
    @@index([isSystem])
}

// Many-to-many relationship tables
model TaskTag {
    id     String @id @default(cuid())
    taskId String
    tagId  String

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([taskId, tagId])
    @@index([taskId])
    @@index([tagId])
}

model NoteTag {
    id     String @id @default(cuid())
    noteId String
    tagId  String

    note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
    tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([noteId, tagId])
    @@index([noteId])
    @@index([tagId])
}

// Time tracking
model TimeEntry {
    id          String    @id @default(cuid())
    startTime   DateTime
    endTime     DateTime?
    duration    Int?      // Duration in seconds (calculated when endTime is set)
    description String?

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId      String

    createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    @@index([taskId])
    @@index([createdById])
    @@index([startTime])
}

// Task status change history
model TaskStatusHistory {
    id          String     @id @default(cuid())
    fromStatus  TaskStatus?
    toStatus    TaskStatus
    changedAt   DateTime   @default(now())
    note        String?    // Optional note about the change

    // Relations
    task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId      String

    changedBy   User       @relation(fields: [changedById], references: [id], onDelete: Cascade)
    changedById String

    @@index([taskId])
    @@index([changedById])
    @@index([changedAt])
}

// Saved search system
model SavedSearch {
    id           String   @id @default(cuid())
    name         String
    description  String?
    searchParams String   // JSON string of search parameters
    isPublic     Boolean  @default(false)

    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    createdBy    User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById  String

    @@unique([name, createdById]) // Unique search name per user
    @@index([createdById])
    @@index([isPublic])
}
