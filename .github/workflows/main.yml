name: Build and Push GTD App to Aliyun Registry

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - '.github/**'
      - '**.md'
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.ALIYUN_DOCKER_HUB_REGISTRY }}
  IMAGE_NAME: infer-gtd

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-8)" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ALIYUN_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.ALIYUN_DOCKER_HUB_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD-HHmmss'}},format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.GITHUB_SHA_SHORT }}
          labels: |
            org.opencontainers.image.title=GTD Task Management System
            org.opencontainers.image.description=Next.js + tRPC + Prisma GTD Application
            org.opencontainers.image.vendor=Your Organization

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SKIP_ENV_VALIDATION=1
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.build.outputs.digest }}"
